@search_near_best_known:
if incr_idxs is undefined
 incr_idxs = []
 n = connxxis.hiscore.incr.index+1
 repeat n
  i = incr_idxs.length
  c = connxxis.hiscore.incr.count(i)
  print("++ ", i, " ", c)
  incr_idxs.push(0)
 endrep
 iidx = 0
 ilen = connxxis.hiscore.incr.count(iidx)
 print(iidx, " ", incr_idxs[iidx], " ", ilen)
 wmin = 0
 hnow = 1
 hiscore = connxxis.hiscore.incr(iidx, incr_idxs[iidx])
 hvts = hiscore[connxxis.index.vertex.tile]
 htrs = hiscore[connxxis.index.tile.rotation]
 connxxis.setup.tiles(hvts, htrs)
endif
if connxxis.hiscore.incr.index >= incr_idxs.length
 n = connxxis.hiscore.incr.index+1-incr_idxs.length
 repeat n
  i = incr_idxs.length
  c = connxxis.hiscore.incr.count(i)
  print("++ ", i, " ", c)
  incr_idxs.push(0)
 endrep
endif
if hnow == 1
 hnow = 0
 stack = []
 v = connxxis.count.vertex
 repeat v
  n = connxxis.count.vertex
  repeat n
   if v == n
    continue
   endif
   info = [v, n, []]
   info[2] = call(@get_rotations, v, n)
   stack.queue(info)
  endrep
 endrep
 info = stack.unqueue()
 v = info.unqueue()
 u = info.unqueue()
 rotations = info.unqueue()
 undo_move = 0
 connxxis.move(connxxis.vertex.tile[u], v)
endif
if rotations.length > 0
 rotation = rotations.unqueue()
 tile_rotations = connxxis.tile.rotation
 tile_rotations[connxxis.vertex.tile[u]] = rotation[0]
 tile_rotations[connxxis.vertex.tile[v]] = rotation[1]
 connxxis.setup.tiles(connxxis.vertex.tile, tile_rotations)
endif
if undo_move == 0
 undo_move = 1
 connxxis.move(connxxis.vertex.tile[u], v)
endif
if stack.length > 0
 info = stack.unqueue()
 v = info.unqueue()
 u = info.unqueue()
 rotations = info.unqueue()
 undo_move = 0
 connxxis.move(connxxis.vertex.tile[u], v)
endif
incr_idxs[iidx]++
if incr_idxs[iidx] < ilen
 print(iidx, " ", incr_idxs[iidx], " ", ilen)
 wmin = 0
 hnow = 1
 hiscore = connxxis.hiscore.incr(iidx, incr_idxs[iidx])
 hvts = hiscore[connxxis.index.vertex.tile]
 htrs = hiscore[connxxis.index.tile.rotation]
 connxxis.setup.tiles(hvts, htrs)
else
 if incr_idxs[iidx] > ilen
  incr_idxs[iidx] = ilen
 endif
 if iidx < connxxis.hiscore.incr.index
  iidx++
  ilen = connxxis.hiscore.incr.count(iidx)
  print(iidx, " ", incr_idxs[iidx], " ", ilen)
  wmin = 0
  hnow = 1
  hiscore = connxxis.hiscore.incr(iidx, incr_idxs[iidx])
  hvts = hiscore[connxxis.index.vertex.tile]
  htrs = hiscore[connxxis.index.tile.rotation]
  connxxis.setup.tiles(hvts, htrs)
 endif
endif
wmin++
if wmin <= 24*60
 print("wait:", wmin)
 connxxis.wait(60)
endif
print("halt")
connxxis.halt()

@get_rotations:
v = call.args[0]
u = call.args[1]
are_adjacent = call(@are_adjacent, v, u)
vtr = connxxis.tile.rotation[connxxis.vertex.tile[v]]
utr = connxxis.tile.rotation[connxxis.vertex.tile[u]]
rotations = []
if are_adjacent == 1
 n = 6
 repeat n
  m = 6
  repeat m
   rotations.queue([(vtr+n)%6, (utr+m)%6])
  endrep
 endrep
 rotz = rotations.unqueue()
 rotations.push(rotz)
else
 n = 5
 repeat n
  rotations.queue([(vtr+n+1)%6, utr])
 endrep
 n = 5
 repeat n
  rotations.queue([vtr, (utr+n+1)%6])
 endrep
 rotations.push([vtr, utr])
endif
return(rotations)

@are_adjacent:
v = call.args[0]
u = call.args[1]
n = connxxis.count.face
repeat n
 if connxxis.vertex.face.vertex[v][n] == u
  return(1)
 endif
endrep
return(0)
